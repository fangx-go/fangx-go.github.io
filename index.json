[{"categories":["Golang源码阅读"],"content":"context，即上下文，主要用来在goroutine之间传递上下文信息，包括控制goroutine退出、共享数据。 ","date":"2022-05-18","objectID":"/context%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/:0:0","tags":["Golang"],"title":"Golang源码阅读(一)：context","uri":"/context%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"},{"categories":["Golang源码阅读"],"content":"Context ","date":"2022-05-18","objectID":"/context%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/:1:0","tags":["Golang"],"title":"Golang源码阅读(一)：context","uri":"/context%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"},{"categories":["Golang源码阅读"],"content":"interface type Context interface { Deadline() (deadline time.Time, ok bool) Done() \u003c-chan struct{} Err() error Value(key any) any } Deadline 返回context未被取消的截止时间，若context未设置deadline时，Dealine返回ok=false； Done 若context被取消，Done会返回一个被关闭的channel，若context不会被取消，Done返回nil； Err Done未关闭时返回nil，Done被关闭时返回non-nil解释原因； Value 返回key对应的value，若无value与key对应则返回nil。 ","date":"2022-05-18","objectID":"/context%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/:1:1","tags":["Golang"],"title":"Golang源码阅读(一)：context","uri":"/context%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"},{"categories":["Golang源码阅读"],"content":"emptyCtx type emptyCtx int func (*emptyCtx) Deadline() (deadline time.Time, ok bool) { return } func (*emptyCtx) Done() \u003c-chan struct{} { return nil } func (*emptyCtx) Err() error { return nil } func (*emptyCtx) Value(key any) any { return nil } func (e *emptyCtx) String() string { switch e { case background: return \"context.Background\" case todo: return \"context.TODO\" } return \"unknown empty Context\" } var ( background = new(emptyCtx) todo = new(emptyCtx) ) func Background() Context { return background } func TODO() Context { return todo } emptyCtx不会被取消，没有values，也没有deadline，context包提供了两个emptyCtx：background、todo。 ","date":"2022-05-18","objectID":"/context%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/:1:2","tags":["Golang"],"title":"Golang源码阅读(一)：context","uri":"/context%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"},{"categories":["Golang源码阅读"],"content":"cancelCtx type cancelCtx struct { Context mu sync.Mutex // protects following fields done atomic.Value // of chan struct{}, created lazily, closed by first cancel call children map[canceler]struct{} // set to nil by the first cancel call err error // set to non-nil by the first cancel call } func (c *cancelCtx) Value(key any) any { if key == \u0026cancelCtxKey { return c } return value(c.Context, key) } func (c *cancelCtx) Done() \u003c-chan struct{} { d := c.done.Load() if d != nil { return d.(chan struct{}) } c.mu.Lock() defer c.mu.Unlock() d = c.done.Load() if d == nil { d = make(chan struct{}) c.done.Store(d) } return d.(chan struct{}) } func (c *cancelCtx) Err() error { c.mu.Lock() err := c.err c.mu.Unlock() return err } continue… ","date":"2022-05-18","objectID":"/context%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/:2:0","tags":["Golang"],"title":"Golang源码阅读(一)：context","uri":"/context%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"}]